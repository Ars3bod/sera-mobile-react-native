name: 🚀 Release & Deploy (Debug Mode)

on:
  push:
    branches: [develop, feature/*]
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build and deploy'
        required: true
        default: 'both'
        type: choice
        options:
          - both
          - android-only
          - ios-only
      release_type:
        description: 'Type of debug release'
        required: true
        default: 'beta-debug'
        type: choice
        options:
          - beta-debug
          - internal-debug
          - testing-debug
      release_notes:
        description: 'Release notes for debug build'
        required: false
        default: 'Debug build for testing and development'
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: true
        type: boolean
      deploy_to_firebase:
        description: 'Deploy to Firebase App Distribution'
        required: false
        default: true
        type: boolean

# إضافة الصلاحيات المطلوبة لـ GitHub Actions
permissions:
  contents: write # لإنشاء releases وإرفاق files
  actions: read # لقراءة workflow runs
  packages: read # لقراءة packages إذا لزم الأمر
  pull-requests: read # لقراءة PR info إذا لزم الأمر

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  test:
    name: 🧪 Run Tests (Optional)
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.skip_tests != 'true' }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🧪 Run unit tests
        run: npm test -- --coverage --watchAll=false

      - name: 📊 Upload test coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests-debug
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  build-android-debug:
    name: 🤖 Build Android Debug
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped') && (github.event.inputs.platforms == 'both' || github.event.inputs.platforms == 'android-only' || github.event_name == 'push')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: ☕ Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🔄 Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-gradle-debug-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-debug-
            ${{ runner.os }}-gradle-

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🔧 Make gradlew executable
        run: chmod +x android/gradlew

      - name: 🏗️ Build Android Debug APK
        run: cd android && ./gradlew assembleDebug --no-daemon --stacktrace

      - name: 📋 List APK files
        run: |
          echo "🔍 Debug APK files generated:"
          find android/app/build/outputs/apk/debug/ -name "*.apk" -exec ls -la {} \;

      - name: ⬆️ Upload Android Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: sera-android-debug-${{ github.run_number }}
          path: android/app/build/outputs/apk/debug/*.apk
          retention-days: 30

  build-ios-debug:
    name: 🍎 Build iOS Debug
    runs-on: macos-latest
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped') && (github.event.inputs.platforms == 'both' || github.event.inputs.platforms == 'ios-only' || github.event_name == 'push')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          working-directory: ios

      - name: 🔄 Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-debug-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-debug-
            ${{ runner.os }}-pods-

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🍎 Install CocoaPods dependencies
        run: cd ios && pod install --repo-update

      - name: 🏗️ Build iOS Debug Archive
        run: |
          cd ios
          # إعداد Team ID افتراضي للـ debug builds
          DEFAULT_TEAM="XXXXXXXXXX"  # Team ID افتراضي (يمكن أن يكون وهمي للـ debug)

          # بناء debug archive مع minimal signing requirements
          xcodebuild -workspace seraApp.xcworkspace \
                     -scheme seraApp \
                     -configuration Debug \
                     -destination generic/platform=iOS \
                     -archivePath $PWD/build/seraApp-Debug.xcarchive \
                     archive \
                     DEVELOPMENT_TEAM="$DEFAULT_TEAM" \
                     CODE_SIGNING_ALLOWED=YES \
                     CODE_SIGNING_REQUIRED=NO \
                     CODE_SIGN_IDENTITY="" \
                     PROVISIONING_PROFILE_SPECIFIER="" \
                     -allowProvisioningUpdates

      - name: 📦 Create Debug Export Options
        run: |
          cd ios
          cat > ExportOptionsDebug.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>teamID</key>
              <string>XXXXXXXXXX</string>
              <key>signingStyle</key>
              <string>automatic</string>
              <key>compileBitcode</key>
              <false/>
              <key>stripSwiftSymbols</key>
              <false/>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <false/>
              <key>manageAppVersionAndBuildNumber</key>
              <false/>
              <key>generateAppStoreInformation</key>
              <false/>
          </dict>
          </plist>
          EOF

      - name: 📦 Export Debug IPA (Attempt 1 - Development)
        id: export_dev
        continue-on-error: true
        run: |
          cd ios
          xcodebuild -exportArchive \
                     -archivePath $PWD/build/seraApp-Debug.xcarchive \
                     -exportOptionsPlist ExportOptionsDebug.plist \
                     -exportPath $PWD/build/debug \
                     -allowProvisioningUpdates \
                     -allowProvisioningDeviceRegistration

      - name: 📦 Export Debug IPA (Attempt 2 - Ad Hoc)
        if: steps.export_dev.outcome == 'failure'
        id: export_adhoc
        continue-on-error: true
        run: |
          cd ios
          # جرب ad-hoc method
          cat > ExportOptionsAdHoc.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>ad-hoc</string>
              <key>teamID</key>
              <string>XXXXXXXXXX</string>
              <key>signingStyle</key>
              <string>automatic</string>
              <key>compileBitcode</key>
              <false/>
              <key>stripSwiftSymbols</key>
              <false/>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
                     -archivePath $PWD/build/seraApp-Debug.xcarchive \
                     -exportOptionsPlist ExportOptionsAdHoc.plist \
                     -exportPath $PWD/build/debug-adhoc \
                     -allowProvisioningUpdates

      - name: 📦 Export Debug IPA (Attempt 3 - No Signing)
        if: steps.export_dev.outcome == 'failure' && steps.export_adhoc.outcome == 'failure'
        continue-on-error: true
        run: |
          cd ios
          echo "🔧 محاولة export بدون signing requirements..."
          # استخراج الـ .app من archive للاختبار
          mkdir -p $PWD/build/debug-nosign
          cp -R $PWD/build/seraApp-Debug.xcarchive/Products/Applications/seraApp.app $PWD/build/debug-nosign/

          # إنشاء IPA يدوياً (للاختبار فقط)
          cd $PWD/build/debug-nosign
          mkdir Payload
          cp -R seraApp.app Payload/
          zip -r seraApp-Debug-NoSign.ipa Payload/
          mv seraApp-Debug-NoSign.ipa ../debug/

      - name: 📋 Debug Export Summary
        run: |
          cd ios
          echo "📦 iOS Debug Export Results:"
          echo "🔄 Development method: ${{ steps.export_dev.outcome }}"
          echo "🔄 Ad-hoc method: ${{ steps.export_adhoc.outcome || 'skipped' }}"
          echo "📁 Available files:"
          find build/ -name "*.ipa" -o -name "*.app" | head -10

          # تحقق من وجود أي IPA أو app files
          if find build/ -name "*.ipa" | grep -q .; then
            echo "✅ IPA files found!"
          elif find build/ -name "*.app" | grep -q .; then
            echo "✅ APP files found (archive successful)!"
          else
            echo "⚠️ No IPA or APP files found, but archive may still be available"
          fi

      - name: ⬆️ Upload iOS Debug Archive
        uses: actions/upload-artifact@v4
        with:
          name: sera-ios-debug-${{ github.run_number }}
          path: |
            ios/build/debug/*.ipa
            ios/build/debug-adhoc/*.ipa
            ios/build/debug/*.app
            ios/build/debug-nosign/*.app
            ios/build/seraApp-Debug.xcarchive
          retention-days: 30
          if-no-files-found: warn

      - name: ⬆️ Upload iOS Debug Symbols
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sera-ios-debug-dsym-${{ github.run_number }}
          path: |
            ios/build/seraApp-Debug.xcarchive/dSYMs/**
            ios/build/debug/**/*.dSYM
          retention-days: 90
          if-no-files-found: ignore

  deploy-firebase-debug:
    name: 🔥 Deploy Debug to Firebase
    runs-on: ubuntu-latest
    needs: [build-android-debug, build-ios-debug]
    if: always() && (needs.build-android-debug.result == 'success' || needs.build-ios-debug.result == 'success') && github.event.inputs.deploy_to_firebase != 'false'

    steps:
      - name: 📥 Download Android Debug APK
        uses: actions/download-artifact@v4
        if: needs.build-android-debug.result == 'success' && (github.event.inputs.platforms == 'both' || github.event.inputs.platforms == 'android-only' || github.event_name == 'push')
        with:
          name: sera-android-debug-${{ github.run_number }}
          path: ./artifacts/android-debug
          continue-on-error: true

      - name: 📥 Download iOS Debug Archive
        uses: actions/download-artifact@v4
        if: needs.build-ios-debug.result == 'success' && (github.event.inputs.platforms == 'both' || github.event.inputs.platforms == 'ios-only' || github.event_name == 'push')
        with:
          name: sera-ios-debug-${{ github.run_number }}
          path: ./artifacts/ios-debug
          continue-on-error: true

      - name: 📋 List debug artifacts
        run: |
          echo "📱 Available debug artifacts for platforms: ${{ github.event.inputs.platforms || 'both (auto-triggered)' }}"
          echo "🤖 Android Debug APKs:"
          ls -la ./artifacts/android-debug/ 2>/dev/null || echo "No Android Debug APK found (may be skipped)"
          echo "🍎 iOS Debug files:"
          ls -la ./artifacts/ios-debug/ 2>/dev/null || echo "No iOS Debug files found (may be skipped)"

      - name: 🔥 Deploy Android Debug to Firebase App Distribution
        if: needs.build-android-debug.result == 'success' && hashFiles('./artifacts/android-debug/*.apk') != '' && env.FIREBASE_APP_ID != '' && env.FIREBASE_SERVICE_ACCOUNT != '' && (github.event.inputs.platforms == 'both' || github.event.inputs.platforms == 'android-only' || github.event_name == 'push')
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        env:
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          groups: beta-testers
          file: ./artifacts/android-debug/app-debug.apk
          releaseNotes: |
            🚀 SERA Mobile App - Debug Build for Testing

            📱 Build: ${{ github.run_number }}
            🔄 Commit: ${{ github.sha }}
            📅 Date: ${{ github.event.head_commit.timestamp }}
            🐛 Build Type: DEBUG
            🏗️ Platforms: ${{ github.event.inputs.platforms || 'both (auto-triggered)' }}
            🧪 Tests: ${{ github.event.inputs.skip_tests == 'true' && 'Skipped' || 'Passed' }}

            ⚠️ **هذا إصدار تجريبي للاختبار والتطوير فقط**

            ${{ github.event.inputs.release_notes || 'Debug build for testing and development' }}

      - name: 🔥 Deploy iOS Debug to Firebase App Distribution (if available)
        if: needs.build-ios-debug.result == 'success' && hashFiles('./artifacts/ios-debug/*.ipa') != '' && env.FIREBASE_IOS_APP_ID != '' && env.FIREBASE_SERVICE_ACCOUNT != '' && (github.event.inputs.platforms == 'both' || github.event.inputs.platforms == 'ios-only' || github.event_name == 'push')
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        env:
          FIREBASE_IOS_APP_ID: ${{ secrets.FIREBASE_IOS_APP_ID }}
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        with:
          appId: ${{ secrets.FIREBASE_IOS_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          groups: beta-testers
          file: ./artifacts/ios-debug/*.ipa
          releaseNotes: |
            🚀 SERA Mobile App iOS - Debug Build for Testing

            📱 Build: ${{ github.run_number }}
            🔄 Commit: ${{ github.sha }}
            📅 Date: ${{ github.event.head_commit.timestamp }}
            🐛 Build Type: DEBUG
            🏗️ Platforms: ${{ github.event.inputs.platforms || 'both (auto-triggered)' }}
            🧪 Tests: ${{ github.event.inputs.skip_tests == 'true' && 'Skipped' || 'Passed' }}

            ⚠️ **هذا إصدار تجريبي للاختبار والتطوير فقط**

            ${{ github.event.inputs.release_notes || 'Debug build for testing and development' }}

      - name: 📊 Debug Deployment Summary
        run: |
          echo "🐛 Debug Build Deployment Summary:"
          echo "📦 Run: ${{ github.run_number }}"
          echo "🏗️ Platforms: ${{ github.event.inputs.platforms || 'both (auto-triggered)' }}"
          echo "🧪 Tests: ${{ github.event.inputs.skip_tests == 'true' && 'Skipped ⏭️' || 'Passed ✅' }}"
          echo "🤖 Android Debug: ${{ (github.event.inputs.platforms == 'ios-only' && github.event_name == 'workflow_dispatch') && 'Skipped ⏭️' || (needs.build-android-debug.result == 'success' && 'Success ✅' || 'Failed ❌') }}"
          echo "🍎 iOS Debug: ${{ (github.event.inputs.platforms == 'android-only' && github.event_name == 'workflow_dispatch') && 'Skipped ⏭️' || (needs.build-ios-debug.result == 'success' && 'Success ✅' || 'Failed ❌') }}"
          echo "🔥 Firebase: ${{ env.FIREBASE_CONFIG_SET == 'true' && 'Deployed' || 'Not configured' }}"
          echo "📥 Artifacts: Available for 30 days"
        env:
          FIREBASE_CONFIG_SET: ${{ secrets.FIREBASE_APP_ID != '' && 'true' || 'false' }}

  create-debug-release:
    name: 📦 Create Debug Release
    runs-on: ubuntu-latest
    needs: [build-android-debug, build-ios-debug]
    if: always() && (needs.build-android-debug.result == 'success' || needs.build-ios-debug.result == 'success') && github.event_name == 'workflow_dispatch'

    steps:
      - name: 📥 Download all debug artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 📦 Create Debug GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: SERA Mobile Debug Build ${{ github.run_number }} - ${{ github.event.inputs.platforms }}
          tag_name: debug-build-${{ github.run_number }}-${{ github.event.inputs.platforms }}
          body: |
            🐛 **SERA Mobile App - Debug Build ${{ github.run_number }}**

            ⚠️ **هذا إصدار تجريبي للاختبار والتطوير فقط**

            **معلومات الإصدار:**
            ${{ github.event.inputs.release_notes || 'Debug build for testing and development' }}

            **معلومات البناء:**
            - 📱 Build Number: ${{ github.run_number }}
            - 🏗️ Platforms: ${{ github.event.inputs.platforms }}
            - 🔄 Commit: ${{ github.sha }}
            - 📅 Build Date: ${{ github.event.head_commit.timestamp }}
            - 🐛 Build Type: DEBUG
            - 🧪 Tests: ${{ github.event.inputs.skip_tests == 'true' && '⏭️ Skipped' || '✅ Passed' }}
            - 🤖 Android Debug APK: ${{ (github.event.inputs.platforms == 'ios-only') && '⏭️ Skipped' || (needs.build-android-debug.result == 'success' && '✅ Built' || '❌ Failed') }}
            - 🍎 iOS Debug Archive: ${{ (github.event.inputs.platforms == 'android-only') && '⏭️ Skipped' || (needs.build-ios-debug.result == 'success' && '✅ Built' || '❌ Failed') }}

            **التحميلات:**
            ${{ (github.event.inputs.platforms == 'both' || github.event.inputs.platforms == 'android-only') && '- 🤖 Android Debug APK: app-debug.apk' || '' }}
            ${{ (github.event.inputs.platforms == 'both' || github.event.inputs.platforms == 'ios-only') && '- 🍎 iOS Debug Archive: seraApp-Debug.xcarchive' || '' }}
            - 🐛 Debug Symbols: dSYM files (لتتبع الأخطاء)

            **التثبيت:**
            ${{ (github.event.inputs.platforms == 'both' || github.event.inputs.platforms == 'android-only') && '- **Android**: فعل "Unknown Sources" وثبت APK' || '' }}
            ${{ (github.event.inputs.platforms == 'both' || github.event.inputs.platforms == 'ios-only') && '- **iOS**: يحتاج Xcode أو development certificate' || '' }}

            **Firebase Distribution:**
            - المختبرين في beta-testers سيحصلون على إشعارات تلقائية
            - تحقق من Firebase App Distribution للتحديثات

            **ملاحظة مهمة:**
            هذا debug build مخصص للاختبار والتطوير. لا يُنصح باستخدامه في الإنتاج.
          files: |
            ./artifacts/**/*.apk
            ./artifacts/**/*.ipa
            ./artifacts/**/*.xcarchive
          draft: false
          prerelease: true
          make_latest: false
