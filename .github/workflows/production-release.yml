name: üöÄ Production Release - Google Play & App Store

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'üì± Version number (e.g., 1.3.0)'
        required: true
        type: string
      release_notes:
        description: 'üìù Release notes (what changed in this version)'
        required: true
        type: string
      deploy_android:
        description: 'ü§ñ Deploy to Android (Google Play)'
        required: false
        type: boolean
        default: true
      deploy_ios:
        description: 'üçé Deploy to iOS (TestFlight)'
        required: false
        type: boolean
        default: true

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'
  RUBY_VERSION: '3.2'

jobs:
  # ============================================
  # Job 1: Version Bump
  # ============================================
  version-bump:
    name: üìù Update Version Numbers
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump.outputs.version }}
      android_version_code: ${{ steps.bump.outputs.android_version_code }}
      ios_build_number: ${{ steps.bump.outputs.ios_build_number }}
      commit_sha: ${{ steps.bump.outputs.commit_sha }}
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: üîß Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: ‚úÖ Make Version Script Executable
        run: chmod +x scripts/update-app-version.sh
      
      - name: üî¢ Run Version Bump Script
        id: bump
        run: |
          # Generate iOS build number (timestamp)
          IOS_BUILD=$(date +%s)
          
          # Run version update script
          ./scripts/update-app-version.sh "${{ github.event.inputs.version }}" "$IOS_BUILD"
          
          # Extract updated Android version code
          ANDROID_CODE=$(grep 'versionCode' android/app/build.gradle | grep -oE '[0-9]+' | head -1)
          
          # Set outputs
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "android_version_code=$ANDROID_CODE" >> $GITHUB_OUTPUT
          echo "ios_build_number=$IOS_BUILD" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Version bumped successfully!"
          echo "üì± Version: ${{ github.event.inputs.version }}"
          echo "ü§ñ Android Version Code: $ANDROID_CODE"
          echo "üçé iOS Build Number: $IOS_BUILD"
      
      - name: üìä Display Changes
        run: |
          echo "üì± Files Updated:"
          git diff --stat package.json app.json android/app/build.gradle ios/seraApp.xcodeproj/project.pbxproj
      
      - name: üíæ Commit & Push Version Changes
        run: |
          git add package.json app.json android/app/build.gradle ios/seraApp.xcodeproj/project.pbxproj
          git commit -m "chore: release version ${{ github.event.inputs.version }}

          üì± Version: ${{ github.event.inputs.version }}
          ü§ñ Android Version Code: ${{ steps.bump.outputs.android_version_code }}
          üçé iOS Build Number: ${{ steps.bump.outputs.ios_build_number }}
          
          Release Notes:
          ${{ github.event.inputs.release_notes }}"
          
          git push origin main
          
          # Save commit SHA for later use
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      
      - name: üè∑Ô∏è Create Git Tag
        run: |
          git tag -a "v${{ github.event.inputs.version }}" -m "Release v${{ github.event.inputs.version }}

          ${{ github.event.inputs.release_notes }}"
          
          git push origin "v${{ github.event.inputs.version }}"

  # ============================================
  # Job 2: Build Android AAB for Play Store
  # ============================================
  build-android:
    name: ü§ñ Build Android Release AAB
    needs: version-bump
    runs-on: ubuntu-latest
    environment: PROD
    if: github.event.inputs.deploy_android == 'true'
    timeout-minutes: 45
    
    steps:
      - name: üì• Checkout Code (versioned)
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.version-bump.outputs.version }}
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: ‚òï Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'
      
      - name: üîÑ Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: üì¶ Install NPM Dependencies
        run: npm ci --legacy-peer-deps
      
      - name: üîë Decode Android Upload Keystore
        run: |
          echo "${{ secrets.ANDROID_UPLOAD_KEYSTORE_BASE64 }}" | base64 -d > android/app/upload.keystore
          echo "‚úÖ Upload keystore decoded successfully"
      
      - name: üîß Make Gradlew Executable
        run: chmod +x android/gradlew
      
      - name: üìã Check Android Environment
        run: |
          echo "üîç Android Environment Check:"
          echo "‚Ä¢ Keystore file exists: $(ls -la android/app/upload.keystore 2>/dev/null && echo 'YES' || echo 'NO')"
          echo "‚Ä¢ Gradle wrapper exists: $(ls -la android/gradlew 2>/dev/null && echo 'YES' || echo 'NO')"
          echo "‚Ä¢ Environment variables:"
          echo "  - KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD:+SET}"
          echo "  - KEY_ALIAS: ${KEY_ALIAS:+SET}"
          echo "  - KEY_PASSWORD: ${KEY_PASSWORD:+SET}"
      
      - name: üèóÔ∏è Build Android Release AAB (Signed with Upload Key)
        working-directory: android
        env:
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_UPLOAD_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_UPLOAD_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.ANDROID_UPLOAD_KEY_PASSWORD }}
        run: |
          # Set Gradle JVM options for better memory management
          export GRADLE_OPTS="-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError"
          
          # Clean before build
          ./gradlew clean
          
          # Build with detailed logging
          ./gradlew bundleRelease \
            --no-daemon \
            --stacktrace \
            --info \
            --max-workers=2
          
          echo "‚úÖ AAB signed with upload key and ready for Google Play!"
      
      - name: üì¶ Verify AAB File
        run: |
          if [ -f "android/app/build/outputs/bundle/release/app-release.aab" ]; then
            echo "‚úÖ AAB file found!"
            ls -lh android/app/build/outputs/bundle/release/app-release.aab
          else
            echo "‚ùå AAB file not found!"
            exit 1
          fi
      
      - name: ‚¨ÜÔ∏è Upload AAB Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sera-android-aab-v${{ needs.version-bump.outputs.version }}
          path: android/app/build/outputs/bundle/release/app-release.aab
          retention-days: 90
      
      - name: ‚¨ÜÔ∏è Upload Mapping File (for crash reports)
        uses: actions/upload-artifact@v4
        with:
          name: sera-android-mapping-v${{ needs.version-bump.outputs.version }}
          path: android/app/build/outputs/mapping/release/mapping.txt
          retention-days: 365
          if-no-files-found: ignore

  # ============================================
  # Job 3: Deploy to Google Play Internal Testing
  # ============================================
  deploy-android:
    name: üöÄ Deploy to Google Play (Internal Testing)
    needs: [version-bump, build-android]
    runs-on: ubuntu-latest
    environment: PROD
    if: github.event.inputs.deploy_android == 'true'
    
    steps:
      - name: üì• Download AAB Artifact
        uses: actions/download-artifact@v4
        with:
          name: sera-android-aab-v${{ needs.version-bump.outputs.version }}
          path: ./artifacts
      
      - name: üìã Verify Downloaded AAB
        run: |
          echo "üì¶ Downloaded AAB:"
          ls -lh ./artifacts/
          
          echo "‚úÖ AAB file ready for deployment"
      
      - name: üöÄ Deploy to Google Play Console (Internal Testing)
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: com.sera.seraapp
          releaseFiles: ./artifacts/app-release.aab
          track: internal
          status: completed
          inAppUpdatePriority: 2
          releaseName: v${{ needs.version-bump.outputs.version }}
        continue-on-error: true
      
      - name: üìã Check Google Play Deployment Status
        run: |
          if [ $? -eq 0 ]; then
            echo "‚úÖ Successfully deployed to Google Play Internal Testing!"
            echo "üì± Version: ${{ needs.version-bump.outputs.version }}"
            echo "üî¢ Version Code: ${{ needs.version-bump.outputs.android_version_code }}"
            echo "üîó Check: https://play.google.com/console"
          else
            echo "‚ùå Google Play deployment failed"
            echo "üîç Common issues:"
            echo "  1. Service account permissions not set correctly"
            echo "  2. Package name mismatch (expected: com.sera.seraapp)"
            echo "  3. Service account not added to Google Play Console"
            echo "  4. Wrong service account JSON format"
            echo ""
            echo "üìã Troubleshooting steps:"
            echo "  1. Go to Google Play Console > Setup > API access"
            echo "  2. Verify service account has 'Release manager' role"
            echo "  3. Check that package name matches exactly"
            echo "  4. Regenerate service account JSON if needed"
            exit 1
          fi

  # ============================================
  # Job 4: Build iOS IPA for TestFlight
  # ============================================
  build-ios:
    name: üçé Build iOS Release IPA
    needs: version-bump
    runs-on: macos-14
    environment: PROD
    if: github.event.inputs.deploy_ios == 'true'
    timeout-minutes: 60
    
    steps:
      - name: üì• Checkout Code (versioned)
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.version-bump.outputs.version }}
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üíé Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ios
      
      - name: üîÑ Cache CocoaPods (Disabled for Clean Build)
        run: |
          echo "‚ö†Ô∏è Skipping CocoaPods cache to ensure clean build"
          echo "This prevents hermes-engine version conflicts"
      
      - name: üì¶ Install NPM Dependencies
        run: npm ci --legacy-peer-deps
      
      - name: üçé Install CocoaPods Dependencies
        run: |
          cd ios
          
          # Clean existing pods to avoid conflicts
          rm -rf Pods Podfile.lock
          
          # Set CocoaPods environment variables for better performance
          export COCOAPODS_DISABLE_STATS=true
          export COCOAPODS_SKIP_CACHE=false
          
          # Install pods with specific hermes-engine update
          pod install --repo-update --verbose --no-ansi
          
          # If hermes-engine conflict persists, force update it
          pod update hermes-engine --no-repo-update || true
          
          # Verify hermes-engine installation (simplified check)
          echo "üîç Verifying hermes-engine installation..."
          if [ -d "Pods/hermes-engine" ]; then
            echo "‚úÖ hermes-engine directory found"
          else
            echo "‚ö†Ô∏è hermes-engine directory not found, but continuing..."
          fi
          
          echo "‚úÖ CocoaPods installed successfully"
      
      - name: üîê Import iOS Code Signing Certificates
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_CERTIFICATE_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
      
      - name: üìÑ Install iOS Provisioning Profile
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/${{ secrets.IOS_PROVISIONING_PROFILE_NAME }}.mobileprovision
      
      - name: üèóÔ∏è Build iOS Archive
        run: |
          xcodebuild archive \
            -workspace ios/seraApp.xcworkspace \
            -scheme seraApp \
            -configuration Release \
            -archivePath ios/build/seraApp.xcarchive \
            -destination 'generic/platform=iOS' \
            -allowProvisioningUpdates \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=${{ secrets.IOS_TEAM_ID }} \
            PROVISIONING_PROFILE_SPECIFIER="${{ secrets.IOS_PROVISIONING_PROFILE_NAME }}" \
            CODE_SIGN_IDENTITY="Apple Distribution"
          
          echo "‚úÖ iOS archive created successfully!"
      
      - name: üì¶ Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath ios/build/seraApp.xcarchive \
            -exportPath ios/build \
            -exportOptionsPlist ios/ExportOptions-Release.plist \
            -allowProvisioningUpdates
          
          echo "‚úÖ IPA exported successfully!"
      
      - name: üìã Verify IPA File
        run: |
          if [ -f "ios/build/seraApp.ipa" ]; then
            echo "‚úÖ IPA file found!"
            ls -lh ios/build/seraApp.ipa
          else
            echo "‚ùå IPA file not found!"
            exit 1
          fi
      
      - name: ‚¨ÜÔ∏è Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sera-ios-ipa-v${{ needs.version-bump.outputs.version }}
          path: ios/build/seraApp.ipa
          retention-days: 90
      
      - name: ‚¨ÜÔ∏è Upload dSYM Files (for crash reports)
        uses: actions/upload-artifact@v4
        with:
          name: sera-ios-dsym-v${{ needs.version-bump.outputs.version }}
          path: ios/build/seraApp.xcarchive/dSYMs/
          retention-days: 365
          if-no-files-found: ignore

  # ============================================
  # Job 5: Deploy to TestFlight
  # ============================================
  deploy-ios:
    name: üöÄ Deploy to TestFlight
    needs: [version-bump, build-ios]
    runs-on: macos-14
    environment: PROD
    if: github.event.inputs.deploy_ios == 'true'
    
    steps:
      - name: üì• Download IPA Artifact
        uses: actions/download-artifact@v4
        with:
          name: sera-ios-ipa-v${{ needs.version-bump.outputs.version }}
          path: ./artifacts
      
      - name: üìã Verify Downloaded IPA
        run: |
          echo "üì¶ Downloaded IPA:"
          ls -lh ./artifacts/
      
      - name: üöÄ Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: ./artifacts/seraApp.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
      
      - name: ‚úÖ iOS Deployment Complete
        run: |
          echo "‚úÖ Successfully uploaded to TestFlight!"
          echo "üì± Version: ${{ needs.version-bump.outputs.version }}"
          echo "üî¢ Build Number: ${{ needs.version-bump.outputs.ios_build_number }}"
          echo "üîó Check: https://appstoreconnect.apple.com"

  # ============================================
  # Job 6: Create GitHub Release
  # ============================================
  create-release:
    name: üì¶ Create GitHub Release
    needs: [version-bump, build-android, build-ios]
    runs-on: ubuntu-latest
    if: always() && (needs.build-android.result == 'success' || needs.build-ios.result == 'success')
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.version-bump.outputs.version }}
      
      - name: üì• Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-artifacts
      
      - name: üìã List All Artifacts
        run: |
          echo "üì¶ Release Artifacts:"
          find ./release-artifacts -type f -exec ls -lh {} \;
      
      - name: üì¶ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version-bump.outputs.version }}
          name: üöÄ SERA Mobile v${{ needs.version-bump.outputs.version }}
          body: |
            ## üì± SERA Mobile App - Version ${{ needs.version-bump.outputs.version }}
            
            ### ‚ú® What's New
            ${{ github.event.inputs.release_notes }}
            
            ---
            
            ### üìä Build Information
            | Platform | Status | Details |
            |----------|--------|---------|
            | ü§ñ Android | ${{ needs.build-android.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} | Version Code: `${{ needs.version-bump.outputs.android_version_code }}` |
            | üçé iOS | ${{ needs.build-ios.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} | Build Number: `${{ needs.version-bump.outputs.ios_build_number }}` |
            
            ### üì¶ Downloads
            - **Android AAB**: `sera-android-aab-v${{ needs.version-bump.outputs.version }}.zip`
            - **iOS IPA**: `sera-ios-ipa-v${{ needs.version-bump.outputs.version }}.zip`
            - **Android Mapping**: Crash reports deobfuscation file
            - **iOS dSYM**: Crash reports symbolication files
            
            ### üöÄ Deployment Status
            - ü§ñ **Google Play (Internal Testing)**: ${{ needs.deploy-android.result == 'success' && '‚úÖ Deployed' || github.event.inputs.deploy_android == 'true' && '‚è≥ In Progress' || '‚è≠Ô∏è Skipped' }}
            - üçé **TestFlight**: ${{ needs.deploy-ios.result == 'success' && '‚úÖ Deployed' || github.event.inputs.deploy_ios == 'true' && '‚è≥ In Progress' || '‚è≠Ô∏è Skipped' }}
            
            ### üìÖ Release Details
            - **Release Date**: ${{ github.event.head_commit.timestamp }}
            - **Commit SHA**: `${{ needs.version-bump.outputs.commit_sha }}`
            - **Workflow Run**: [View Build](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### üîó Store Links
            - [Google Play Console](https://play.google.com/console)
            - [App Store Connect](https://appstoreconnect.apple.com)
            
            ---
            
            ### üìù Notes
            - Internal testers will receive automatic notifications
            - Review times: ~1-2 days for Google Play, ~1-2 days for TestFlight
            - Crash reports will be automatically symbolicated with uploaded mapping/dSYM files
          files: |
            ./release-artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true

  # ============================================
  # Job 7: Post-Deployment Notifications
  # ============================================
  notify:
    name: üì¢ Send Deployment Notifications
    needs: [version-bump, build-android, build-ios, deploy-android, deploy-ios]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: üìä Generate Deployment Summary
        run: |
          echo "## üöÄ SERA Mobile Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Platform Selection" >> $GITHUB_STEP_SUMMARY
          echo "- **Android Deployment**: ${{ github.event.inputs.deploy_android }}" >> $GITHUB_STEP_SUMMARY
          echo "- **iOS Deployment**: ${{ github.event.inputs.deploy_ios }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì± Version Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.version-bump.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Android Version Code**: ${{ needs.version-bump.outputs.android_version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **iOS Build Number**: ${{ needs.version-bump.outputs.ios_build_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Build Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Version Bump | ${{ needs.version-bump.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Android | ${{ needs.build-android.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build iOS | ${{ needs.build-ios.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy Android | ${{ needs.deploy-android.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy iOS | ${{ needs.deploy-ios.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìù Release Notes" >> $GITHUB_STEP_SUMMARY
          echo "${{ github.event.inputs.release_notes }}" >> $GITHUB_STEP_SUMMARY
      
      - name: üí¨ Send Slack Notification (if configured)
        if: always()
        continue-on-error: true
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            üöÄ *SERA Mobile Release v${{ needs.version-bump.outputs.version }}*
            
            *Platform Selection:*
            ‚Ä¢ Android: ${{ github.event.inputs.deploy_android == 'true' && '‚úÖ' || '‚è≠Ô∏è' }}
            ‚Ä¢ iOS: ${{ github.event.inputs.deploy_ios == 'true' && '‚úÖ' || '‚è≠Ô∏è' }}
            
            *Build Status:*
            ‚Ä¢ Android AAB: ${{ needs.build-android.result == 'success' && '‚úÖ' || '‚ùå' }}
            ‚Ä¢ iOS IPA: ${{ needs.build-ios.result == 'success' && '‚úÖ' || '‚ùå' }}
            
            *Deployment Status:*
            ‚Ä¢ Google Play: ${{ needs.deploy-android.result == 'success' && '‚úÖ Deployed' || '‚ùå Failed' }}
            ‚Ä¢ TestFlight: ${{ needs.deploy-ios.result == 'success' && '‚úÖ Deployed' || '‚ùå Failed' }}
            
            *What's New:*
            ${{ github.event.inputs.release_notes }}
            
            Triggered by: @${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

# Required permissions
permissions:
  contents: write      # Create releases and tags
  actions: write       # Trigger workflows
  packages: read       # Read packages
