name: 🚀 Release & Deploy

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'beta'
        type: choice
        options:
          - beta
          - production
      release_notes:
        description: 'Release notes'
        required: false
        default: ''
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.skip_tests != 'true' }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🧪 Run unit tests
        run: npm test -- --coverage --watchAll=false

      - name: 📊 Upload test coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  build-android:
    name: 🤖 Build Android Release
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: ☕ Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🔄 Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🔧 Make gradlew executable
        run: chmod +x android/gradlew

      - name: 🏗️ Build Android Release APK
        run: cd android && ./gradlew assembleRelease --no-daemon --stacktrace

      - name: 🔑 Sign APK (if keystore available)
        if: ${{ secrets.ANDROID_KEYSTORE }}
        run: |
          echo "🔐 Signing APK with provided keystore..."
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/app/keystore.jks
          cd android && ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=app/keystore.jks \
            -Pandroid.injected.signing.store.password="${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" \
            -Pandroid.injected.signing.key.alias="${{ secrets.ANDROID_KEY_ALIAS }}" \
            -Pandroid.injected.signing.key.password="${{ secrets.ANDROID_KEY_PASSWORD }}"

      - name: ⬆️ Upload Android APK
        uses: actions/upload-artifact@v4
        with:
          name: sera-android-release-${{ github.run_number }}
          path: android/app/build/outputs/apk/release/*.apk
          retention-days: 90

  build-ios:
    name: 🍎 Build iOS Release
    runs-on: macos-latest
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          working-directory: ios

      - name: 🔄 Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🍎 Install CocoaPods dependencies
        run: cd ios && pod install --repo-update

      - name: 🔐 Import Code-Signing Certificates (if available)
        if: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        run: |
          echo "🔑 Setting up iOS code signing..."
          echo "${{ secrets.IOS_CERTIFICATE_BASE64 }}" | base64 --decode > certificate.p12
          security create-keychain -p "temp123" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "temp123" build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "temp123" build.keychain

      - name: 🔐 Install Provisioning Profile (if available)
        if: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        run: |
          echo "📄 Installing provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles/
          echo "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/seraApp.mobileprovision

      - name: 🏗️ Build iOS Release Archive
        run: |
          cd ios
          xcodebuild -workspace seraApp.xcworkspace \
                     -scheme seraApp \
                     -configuration Release \
                     -destination generic/platform=iOS \
                     -archivePath $PWD/build/seraApp-Release.xcarchive \
                     archive \
                     CODE_SIGNING_ALLOWED=NO || \
          xcodebuild -workspace seraApp.xcworkspace \
                     -scheme seraApp \
                     -configuration Release \
                     -destination generic/platform=iOS \
                     -archivePath $PWD/build/seraApp-Release.xcarchive \
                     archive

      - name: 📦 Create Export Options
        run: |
          cd ios
          cat > ExportOptionsRelease.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>${{ secrets.IOS_CERTIFICATE_BASE64 && 'app-store' || 'development' }}</string>
              <key>teamID</key>
              <string>\${DEVELOPMENT_TEAM}</string>
              <key>compileBitcode</key>
              <false/>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>manageAppVersionAndBuildNumber</key>
              <false/>
          </dict>
          </plist>
          EOF

      - name: 📦 Export IPA
        run: |
          cd ios
          xcodebuild -exportArchive \
                     -archivePath $PWD/build/seraApp-Release.xcarchive \
                     -exportOptionsPlist ExportOptionsRelease.plist \
                     -exportPath $PWD/build/release \
                     -allowProvisioningUpdates || \
          xcodebuild -exportArchive \
                     -archivePath $PWD/build/seraApp-Release.xcarchive \
                     -exportPath $PWD/build/release \
                     -exportOptionsPlist ExportOptionsRelease.plist \
                     -allowProvisioningDeviceRegistration

      - name: ⬆️ Upload iOS IPA
        uses: actions/upload-artifact@v4
        with:
          name: sera-ios-release-${{ github.run_number }}
          path: |
            ios/build/release/*.ipa
            ios/build/release/seraApp.app
            ios/build/seraApp-Release.xcarchive
          retention-days: 90
          if-no-files-found: warn

      - name: ⬆️ Upload iOS dSYM files
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sera-ios-dsym-${{ github.run_number }}
          path: |
            ios/build/seraApp-Release.xcarchive/dSYMs/**
            ios/build/release/**/*.dSYM
          retention-days: 365
          if-no-files-found: ignore

  deploy-firebase:
    name: 🔥 Deploy to Firebase
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: always() && (needs.build-android.result == 'success' || needs.build-ios.result == 'success') && secrets.FIREBASE_APP_ID && secrets.FIREBASE_SERVICE_ACCOUNT

    steps:
      - name: 📥 Download Android APK
        uses: actions/download-artifact@v4
        if: needs.build-android.result == 'success'
        with:
          name: sera-android-release-${{ github.run_number }}
          path: ./artifacts/android
          continue-on-error: true

      - name: 📥 Download iOS IPA
        uses: actions/download-artifact@v4
        if: needs.build-ios.result == 'success'
        with:
          name: sera-ios-release-${{ github.run_number }}
          path: ./artifacts/ios
          continue-on-error: true

      - name: 📋 List artifacts
        run: |
          echo "📱 Available artifacts:"
          ls -la ./artifacts/android/ 2>/dev/null || echo "No Android APK found"
          ls -la ./artifacts/ios/ 2>/dev/null || echo "No iOS IPA found"

      - name: 🔥 Deploy Android to Firebase App Distribution
        if: needs.build-android.result == 'success' && hashFiles('./artifacts/android/*.apk') != ''
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          groups: ${{ github.event.inputs.release_type == 'production' && 'production-testers' || 'beta-testers' }}
          file: ./artifacts/android/app-release.apk
          releaseNotes: |
            🚀 SERA Mobile App - ${{ github.event.inputs.release_type || 'beta' }} Release

            📱 Build: ${{ github.run_number }}
            🔄 Commit: ${{ github.sha }}
            📅 Date: ${{ github.event.head_commit.timestamp }}
            🧪 Tests: ${{ github.event.inputs.skip_tests == 'true' && 'Skipped' || 'Passed' }}

            ${{ github.event.inputs.release_notes || 'Automated release from GitHub Actions' }}

      - name: 🔥 Deploy iOS to Firebase App Distribution (if available)
        if: needs.build-ios.result == 'success' && hashFiles('./artifacts/ios/*.ipa') != ''
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_IOS_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          groups: ${{ github.event.inputs.release_type == 'production' && 'production-testers' || 'beta-testers' }}
          file: ./artifacts/ios/*.ipa
          releaseNotes: |
            🚀 SERA Mobile App iOS - ${{ github.event.inputs.release_type || 'beta' }} Release

            📱 Build: ${{ github.run_number }}
            🔄 Commit: ${{ github.sha }}
            📅 Date: ${{ github.event.head_commit.timestamp }}
            🧪 Tests: ${{ github.event.inputs.skip_tests == 'true' && 'Skipped' || 'Passed' }}

            ${{ github.event.inputs.release_notes || 'Automated release from GitHub Actions' }}

  create-github-release:
    name: 📦 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: always() && (needs.build-android.result == 'success' || needs.build-ios.result == 'success') && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 📦 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: SERA Mobile v${{ github.ref_name }}
          body: |
            🚀 **SERA Mobile App Release ${{ github.ref_name }}**

            **What's New:**
            ${{ github.event.inputs.release_notes || 'Automated release with latest features and improvements' }}

            **Build Information:**
            - 📱 Build Number: ${{ github.run_number }}
            - 🔄 Commit: ${{ github.sha }}
            - 📅 Release Date: ${{ github.event.head_commit.timestamp }}
            - 🧪 Tests: ${{ github.event.inputs.skip_tests == 'true' && '⏭️ Skipped' || '✅ Passed' }}
            - 🤖 Android APK: ${{ needs.build-android.result == 'success' && '✅ Built' || '❌ Failed' }}
            - 🍎 iOS IPA: ${{ needs.build-ios.result == 'success' && '✅ Built' || '❌ Failed' }}

            **Downloads:**
            - 🤖 Android APK: sera-app-release.apk
            - 🍎 iOS IPA: seraApp.ipa (requires proper signing)
            - 🐛 iOS Debug Symbols: dSYM files (for crash reporting)

            **Installation:**
            - **Android**: Enable "Unknown Sources" in settings and install APK
            - **iOS**: Requires proper provisioning profile and code signing

            **Firebase Distribution:**
            - Beta testers will receive automatic notifications
            - Check Firebase App Distribution for instant updates
          files: |
            ./artifacts/**/*.apk
            ./artifacts/**/*.ipa
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'beta' }}

      - name: 📊 Release Summary
        run: |
          echo "🎉 Release Summary:"
          echo "📦 Tag: ${{ github.ref_name }}"
          echo "🏗️ Build: ${{ github.run_number }}"
          echo "🧪 Tests: ${{ github.event.inputs.skip_tests == 'true' && 'Skipped ⏭️' || 'Passed ✅' }}"
          echo "🤖 Android: ${{ needs.build-android.result == 'success' && 'Success ✅' || 'Failed ❌' }}"
          echo "🍎 iOS: ${{ needs.build-ios.result == 'success' && 'Success ✅' || 'Failed ❌' }}"
          echo "🔥 Firebase: ${{ secrets.FIREBASE_APP_ID && 'Deployed' || 'Not configured' }}"
          echo "📥 GitHub Release: Created"

# إضافة الصلاحيات المطلوبة لـ GitHub Actions
permissions:
  contents: write # لإنشاء releases وإرفاق files
  actions: read # لقراءة workflow runs
  packages: read # لقراءة packages إذا لزم الأمر
  pull-requests: read # لقراءة PR info إذا لزم الأمر
